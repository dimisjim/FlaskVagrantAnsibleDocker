---

- hosts: flask
  become: yes
  gather_facts: False
  vars:
    app_name: hello_app_flask
    webapps_dir: /srv/webapps

  pre_tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      changed_when: False 
    
    - name: add nginx ppa
      action: apt_repository repo=ppa:nginx/stable state=present
    
    - name: install apt packages
      apt:
        name: "{{ packages }}"
      vars:
        packages:
          - python-pip
          - python3
          - python3-pip
          - redis-server
          - mysql-server
          - libmysqlclient-dev
          - nginx
    
    - name: Install pip2 packages
      action: pip name={{item}} state=present
      with_items:
        - MySQL-python

    - name: Install pip3 packages
      action: pip name={{item}} executable=pip3 state=present
      with_items:
        - uwsgi
        - redis
        - flask
        - flask_sqlalchemy
        - flask_marshmallow
        - pymysql
        - marshmallow-sqlalchemy
    - setup: # aka gather_facts
  tasks:

    - name: remove default nginx site
      action: file path=/etc/nginx/sites-enabled/default state=absent
    
    - name: write nginx.conf
      action: template src=templates/nginx.conf dest=/etc/nginx/nginx.conf
    
    - name: create webapps directory
      action: file dest=/srv/webapps state=directory

    - name: create log directory
      action: file dest={{webapps_dir}}/{{app_name}}/log state=directory
  
    - name: create nginx site config
      action: template src=templates/nginx_site.conf dest=/etc/nginx/sites-available/{{app_name}}.conf
      notify:
        - restart nginx
  
    - name: link nginx config
      action: file src=/etc/nginx/sites-available/{{app_name}}.conf dest=/etc/nginx/sites-enabled/{{app_name}}.conf state=link
  
    - name: update mysql root password for all root accounts
      mysql_user: 
        name: root 
        host: "{{ item }}" 
        password: root
        login_user: root
        login_password: root
        check_implicit_admin: yes
        priv: "*.*:ALL,GRANT"
      with_items:
        - "{{ ansible_hostname }}"
        - 127.0.0.1
        - ::1
        - localhost 

    - name: Execute initdb
      shell: "python3 /opt/flask/initdb.py >> /opt/flask/log/application.log 2>&1"
    
    - name: Start uwsgi process
      shell: "systemctl start app && systemctl enable app"

    # - name: Execute uwsgi flask app
    #   shell: "sudo -u vagrant uwsgi --ini /opt/flask/app.ini >> /opt/flask/log/application.log 2>&1 &"

    # - name: Execute app
    #   shell: "python3 /opt/flask/app.py >> /opt/flask/log/application.log 2>&1"

  handlers:
    - name: restart nginx
      action: service name=nginx state=restarted

# lb
- hosts: lb
  become: yes
  gather_facts: False
  
  pre_tasks:
    - name: Install python for Ansible
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      changed_when: False   

    - name: install haproxy and socat
      apt: pkg={{ item }} state=latest
      with_items:
      - haproxy
      - socat
      # - iproutes2
    - setup: # aka gather_facts
  tasks:
    - name: enable haproxy
      lineinfile: dest=/etc/default/haproxy regexp="^ENABLED" line="ENABLED=1"
      notify: restart haproxy

    - name: deploy haproxy config
      template: src=templates/haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg
      notify: restart haproxy

  handlers:

  - name: restart haproxy
    service: name=haproxy state=restarted

#ufw firewall all
- hosts: all
  become: yes 

  tasks:
  
    - name: install ufw packages
      apt: state=present pkg=ufw
      
    - name: setup ufw
      ufw: state=enabled policy=deny
      
    - name: ufw allow ssh traffic
      ufw: rule=allow port=ssh
    
    - name: ufw allow http traffic
      ufw: rule=allow port=http
      
#ufw firewall web
- hosts: flask
  become: yes
  
  tasks:      
    - name: ufw allow uwsgi<->nginx traffic port
      ufw: rule=allow port=9002 proto=tcp
